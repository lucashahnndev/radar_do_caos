import sqlite3
from datetime import datetime
import pytz
import yfinance as yf
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
import requests
import logging
import os

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configura√ß√µes
DB_PATH = "acoes.db"
TZ = pytz.timezone("America/Sao_Paulo")
DASHBOARD_URL = os.environ.get("DASHBOARD_URL", "http://localhost:8001")

# Inst√¢ncia global do bot para uso nas fun√ß√µes agendadas
telegram_bot_instance = None

def setup_database():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # Tabelas originais do bot
    c.execute("""
        CREATE TABLE IF NOT EXISTS acoes_monitoradas (
            user_id INTEGER,
            ticker TEXT,
            preco_referencia REAL,
            PRIMARY KEY (user_id, ticker)
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS usuarios (
            user_id INTEGER PRIMARY KEY,
            resumo_automatico INTEGER DEFAULT 1,
            horario_resumo TEXT DEFAULT '18:00',
            horario_panico TEXT DEFAULT '18:00'
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS alertas_precos (
            user_id INTEGER,
            ticker TEXT,
            preco_alvo REAL,
            sentido TEXT DEFAULT 'DOWN',
            notificado INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, ticker)
        )
    """)
    c.execute("""
        CREATE TABLE IF NOT EXISTS alertas_panico (
            user_id INTEGER,
            ticker TEXT,
            ativo INTEGER DEFAULT 1,
            percentual_queda REAL DEFAULT 5.0,
            PRIMARY KEY (user_id, ticker)
        )
    """)

    # Tabelas do dashboard
    c.execute("""
        CREATE TABLE IF NOT EXISTS dashboard_users (
            user_id INTEGER PRIMARY KEY,
            dashboard_key TEXT UNIQUE NOT NULL,
            username TEXT,
            theme TEXT DEFAULT 'dark',
            last_login TEXT
        )
    """)

    c.execute("""
        CREATE TABLE IF NOT EXISTS portfolio_positions (
            user_id INTEGER,
            ticker TEXT,
            quantity REAL,
            avg_price REAL,
            PRIMARY KEY (user_id, ticker)
        )
    """)

    conn.commit()
    conn.close()

# --- Comandos Telegram ---

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.first_name or update.effective_user.username or "Usu√°rio"

    # Registrar usu√°rio no banco se n√£o existir
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO usuarios (user_id) VALUES (?)", (user_id,))

    welcome_message = f"""
üöÄ *Bem-vindo ao Radar do Caos, {username}!*

üìä *Bot de Monitoramento de A√ß√µes*

*Comandos Principais:*
‚Ä¢ `/add TICKER` - Adicionar a√ß√£o para monitoramento
‚Ä¢ `/remove TICKER` - Remover a√ß√£o
‚Ä¢ `/lista` - Listar a√ß√µes monitoradas
‚Ä¢ `/resumo` - Resumo das suas a√ß√µes

*Alertas:*
‚Ä¢ `/alerta TICKER PRECO` - Definir alerta de pre√ßo
‚Ä¢ `/remover_alerta TICKER` - Remover alerta
‚Ä¢ `/panico TICKER ON|OFF PERCENTUAL` - Alerta de p√¢nico

*Configura√ß√µes:*
‚Ä¢ `/auto ON|OFF` - Ativar/desativar resumo autom√°tico
‚Ä¢ `/horario HH:MM` - Hor√°rio do resumo di√°rio
‚Ä¢ `/horario_panico HH:MM` - Hor√°rio do alerta de p√¢nico

*üåê Dashboard Web:*
‚Ä¢ `/dashboard` - Acesso ao painel interativo

O dashboard oferece visualiza√ß√µes gr√°ficas, gest√£o de portf√≥lio e configura√ß√µes avan√ßadas!
    """

    update.message.reply_text(welcome_message, parse_mode='Markdown')

def dashboard_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    username = update.effective_user.first_name or update.effective_user.username or "Usu√°rio"
    telegram_username = update.effective_user.username

    try:
        # Fazer requisi√ß√£o para gerar link do dashboard
        response = requests.get(
            f"{DASHBOARD_URL}/generate_dashboard_link/{user_id}",
            params={"username": username},
            timeout=10
        )

        if response.status_code == 200:
            data = response.json()
            dashboard_url = data.get("dashboard_url")
            dashboard_key = data.get("dashboard_key")
            message = data.get("message", "")

            # Informa√ß√µes do usu√°rio para facilitar o login
            user_info = f"""
üë§ *Suas Informa√ß√µes:*
‚Ä¢ ID: `{user_id}`
‚Ä¢ Nome: {username}"""

            if telegram_username:
                user_info += f"\n‚Ä¢ Username: @{telegram_username}"

            if "j√° possui acesso" in message:
                reply_text = f"""
üåê *Dashboard - Radar do Caos*

Voc√™ j√° possui acesso ao dashboard!

üîó *Link de Acesso:*
{dashboard_url}

{user_info}

üîë Use sua chave existente ou solicite reset com `/reset_dashboard`

üí° *Dica:* Salve este link nos seus favoritos para acesso r√°pido!
                """
            else:
                reply_text = f"""
üåê *Dashboard - Radar do Caos*

‚úÖ Acesso criado com sucesso!

üîó *Link de Acesso:*
{dashboard_url}

{user_info}

üîë *Sua Chave de Acesso:*
`{dashboard_key}`

‚ö†Ô∏è *Importante:*
‚Ä¢ Guarde sua chave em local seguro
‚Ä¢ Use-a para fazer login no dashboard
‚Ä¢ Voc√™ pode alter√°-la depois nas configura√ß√µes

üí° *Recursos do Dashboard:*
‚Ä¢ üìä Gr√°ficos interativos
‚Ä¢ üíº Gest√£o de portf√≥lio
‚Ä¢ üîî Configura√ß√£o de alertas
‚Ä¢ üé® Temas personaliz√°veis
                """
        else:
            reply_text = "‚ùå Erro ao gerar acesso ao dashboard. Tente novamente mais tarde."

    except requests.exceptions.RequestException as e:
        logger.error(f"Erro ao conectar com dashboard: {e}")
        reply_text = "‚ùå Erro de conex√£o com o dashboard. Verifique se o servi√ßo est√° ativo."
    except Exception as e:
        logger.error(f"Erro inesperado no comando dashboard: {e}")
        reply_text = "‚ùå Erro inesperado. Tente novamente mais tarde."

    update.message.reply_text(reply_text, parse_mode='Markdown')

def reset_dashboard(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    try:
        # Remover usu√°rio do dashboard para for√ßar nova cria√ß√£o
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("DELETE FROM dashboard_users WHERE user_id = ?", (user_id,))

        # Chamar comando dashboard para recriar
        dashboard_command(update, context)

    except Exception as e:
        logger.error(f"Erro ao resetar dashboard: {e}")
        update.message.reply_text("‚ùå Erro ao resetar acesso ao dashboard.")

def add_acao(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("üìù *Uso:* `/add TICKER`\n\n*Exemplo:* `/add PETR4`", parse_mode='Markdown')
        return

    user_id = update.effective_user.id
    ticker = context.args[0].upper()

    try:
        acao = yf.Ticker(ticker)
        hist = acao.history(period="1d")
        if hist.empty:
            raise ValueError("Sem dados hist√≥ricos")
        preco = float(hist["Close"].iloc[-1])
    except Exception as e:
        logger.warning(f"Erro ao obter dados para {ticker}: {e}")
        update.message.reply_text(f"‚ùå Erro ao obter pre√ßo de *{ticker}*. Verifique se o ticker est√° correto.", parse_mode='Markdown')
        return

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("INSERT OR REPLACE INTO acoes_monitoradas VALUES (?, ?, ?)", (user_id, ticker, preco))
            c.execute("INSERT OR IGNORE INTO usuarios (user_id) VALUES (?)", (user_id,))

        update.message.reply_text(f"‚úÖ *{ticker}* adicionada com pre√ßo refer√™ncia *R$ {preco:.2f}*", parse_mode='Markdown')
        logger.info(f"Usu√°rio {user_id} adicionou a√ß√£o {ticker}")

    except Exception as e:
        logger.error(f"Erro ao salvar a√ß√£o {ticker} para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao salvar a√ß√£o. Tente novamente.")

def remove_acao(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("üìù *Uso:* `/remove TICKER`\n\n*Exemplo:* `/remove PETR4`", parse_mode='Markdown')
        return

    user_id = update.effective_user.id
    ticker = context.args[0].upper()

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            # Verificar se a a√ß√£o existe
            c.execute("SELECT ticker FROM acoes_monitoradas WHERE user_id=? AND ticker=?", (user_id, ticker))
            if not c.fetchone():
                update.message.reply_text(f"‚ùå *{ticker}* n√£o est√° sendo monitorada.", parse_mode='Markdown')
                return

            # Remove a√ß√£o monitorada
            c.execute("DELETE FROM acoes_monitoradas WHERE user_id=? AND ticker=?", (user_id, ticker))
            # Remove alertas pre√ßo vinculados
            c.execute("DELETE FROM alertas_precos WHERE user_id=? AND ticker=?", (user_id, ticker))
            # Remove alertas panico vinculados
            c.execute("DELETE FROM alertas_panico WHERE user_id=? AND ticker=?", (user_id, ticker))

        update.message.reply_text(f"‚úÖ *{ticker}* removida e alertas associados removidos.", parse_mode='Markdown')
        logger.info(f"Usu√°rio {user_id} removeu a√ß√£o {ticker}")

    except Exception as e:
        logger.error(f"Erro ao remover a√ß√£o {ticker} para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao remover a√ß√£o. Tente novamente.")

def listar_acoes(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT ticker, preco_referencia FROM acoes_monitoradas WHERE user_id=?", (user_id,))
            acoes = c.fetchall()

        if not acoes:
            update.message.reply_text("üìã Nenhuma a√ß√£o monitorada.\n\nUse `/add TICKER` para adicionar a√ß√µes.", parse_mode='Markdown')
        else:
            message = "üìã *A√ß√µes Monitoradas:*\n\n"
            for ticker, preco_ref in acoes:
                message += f"‚Ä¢ *{ticker}* - Ref: R$ {preco_ref:.2f}\n"
            message += f"\nüí° Total: {len(acoes)} a√ß√µes"
            update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao listar a√ß√µes para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao listar a√ß√µes. Tente novamente.")

def configurar_auto(update: Update, context: CallbackContext):
    if not context.args or context.args[0].upper() not in ['ON', 'OFF']:
        update.message.reply_text("üìù *Uso:* `/auto ON` ou `/auto OFF`", parse_mode='Markdown')
        return

    status = 1 if context.args[0].upper() == "ON" else 0
    user_id = update.effective_user.id

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("INSERT OR IGNORE INTO usuarios (user_id) VALUES (?)", (user_id,))
            c.execute("UPDATE usuarios SET resumo_automatico=? WHERE user_id=?", (status, user_id))

        status_text = "ativado" if status else "desativado"
        update.message.reply_text(f"‚úÖ Resumo autom√°tico *{status_text}*", parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao configurar auto resumo para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao salvar configura√ß√£o. Tente novamente.")

def configurar_horario(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("üìù *Uso:* `/horario HH:MM`\n\n*Exemplo:* `/horario 18:00`", parse_mode='Markdown')
        return

    horario = context.args[0]
    try:
        datetime.strptime(horario, "%H:%M")
    except ValueError:
        update.message.reply_text("‚ùå Formato inv√°lido. Use *HH:MM* (exemplo: 18:00)", parse_mode='Markdown')
        return

    user_id = update.effective_user.id

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("INSERT OR IGNORE INTO usuarios (user_id) VALUES (?)", (user_id,))
            c.execute("UPDATE usuarios SET horario_resumo=? WHERE user_id=?", (horario, user_id))

        update.message.reply_text(f"‚úÖ Hor√°rio do resumo di√°rio definido para *{horario}*", parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao configurar hor√°rio para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao salvar hor√°rio. Tente novamente.")

def configurar_horario_panico(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("üìù *Uso:* `/horario_panico HH:MM`\n\n*Exemplo:* `/horario_panico 18:00`", parse_mode='Markdown')
        return

    horario = context.args[0]
    try:
        datetime.strptime(horario, "%H:%M")
    except ValueError:
        update.message.reply_text("‚ùå Formato inv√°lido. Use *HH:MM* (exemplo: 18:00)", parse_mode='Markdown')
        return

    user_id = update.effective_user.id

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("INSERT OR IGNORE INTO usuarios (user_id) VALUES (?)", (user_id,))
            c.execute("UPDATE usuarios SET horario_panico=? WHERE user_id=?", (horario, user_id))

        update.message.reply_text(f"‚úÖ Hor√°rio do alerta de p√¢nico definido para *{horario}*", parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao configurar hor√°rio p√¢nico para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao salvar hor√°rio. Tente novamente.")

def configurar_alerta(update: Update, context: CallbackContext):
    if len(context.args) < 2:
        update.message.reply_text("üìù *Uso:* `/alerta TICKER PRECO`\n\n*Exemplo:* `/alerta PETR4 25.50`", parse_mode='Markdown')
        return

    user_id = update.effective_user.id
    ticker = context.args[0].upper()

    try:
        preco_alvo = float(context.args[1].replace(',', '.'))
    except ValueError:
        update.message.reply_text("‚ùå Pre√ßo inv√°lido. Use formato: 25.50 ou 25,50", parse_mode='Markdown')
        return

    try:
        acao = yf.Ticker(ticker)
        hist = acao.history(period="1d")
        if hist.empty:
            raise ValueError("Sem dados")
        preco_atual = float(hist["Close"].iloc[-1])
    except Exception as e:
        logger.warning(f"Erro ao obter pre√ßo atual de {ticker}: {e}")
        update.message.reply_text(f"‚ùå Erro ao obter pre√ßo atual de *{ticker}*", parse_mode='Markdown')
        return

    sentido = "UP" if preco_alvo > preco_atual else "DOWN"

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                INSERT OR REPLACE INTO alertas_precos (user_id, ticker, preco_alvo, sentido, notificado)
                VALUES (?, ?, ?, ?, 0)
            """, (user_id, ticker, preco_alvo, sentido))

        direcao = "acima de" if sentido == "UP" else "abaixo de"
        update.message.reply_text(
            f"‚úÖ Alerta de pre√ßo para *{ticker}* configurado em *R$ {preco_alvo:.2f}*\n"
            f"({direcao} R$ {preco_atual:.2f})",
            parse_mode='Markdown'
        )
        logger.info(f"Usu√°rio {user_id} configurou alerta para {ticker} em {preco_alvo}")

    except Exception as e:
        logger.error(f"Erro ao configurar alerta para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao salvar alerta. Tente novamente.")

def remover_alerta(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("üìù *Uso:* `/remover_alerta TICKER`\n\n*Exemplo:* `/remover_alerta PETR4`", parse_mode='Markdown')
        return

    user_id = update.effective_user.id
    ticker = context.args[0].upper()

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("DELETE FROM alertas_precos WHERE user_id=? AND ticker=?", (user_id, ticker))
            if c.rowcount == 0:
                update.message.reply_text(f"‚ùå Nenhum alerta encontrado para *{ticker}*", parse_mode='Markdown')
            else:
                update.message.reply_text(f"‚úÖ Alerta para *{ticker}* removido.", parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao remover alerta para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao remover alerta. Tente novamente.")

def configurar_panico(update: Update, context: CallbackContext):
    if len(context.args) < 3:
        update.message.reply_text("üìù *Uso:* `/panico TICKER ON|OFF PERCENTUAL`\n\n*Exemplo:* `/panico PETR4 ON 5`", parse_mode='Markdown')
        return

    user_id = update.effective_user.id
    ticker = context.args[0].upper()
    status = context.args[1].upper()

    if status not in ["ON", "OFF"]:
        update.message.reply_text("‚ùå Status inv√°lido, use *ON* ou *OFF*", parse_mode='Markdown')
        return

    try:
        percentual = float(context.args[2].replace(',', '.'))
        if percentual <= 0:
            raise ValueError("Percentual deve ser positivo")
    except ValueError:
        update.message.reply_text("‚ùå Percentual inv√°lido, deve ser n√∫mero positivo", parse_mode='Markdown')
        return

    ativo = 1 if status == "ON" else 0

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("INSERT OR REPLACE INTO alertas_panico (user_id, ticker, ativo, percentual_queda) VALUES (?, ?, ?, ?)",
                      (user_id, ticker, ativo, percentual))

        status_text = "ativado" if ativo else "desativado"
        update.message.reply_text(f"‚úÖ Alerta de p√¢nico para *{ticker}* {status_text} com queda de *{percentual}%*", parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao configurar alerta p√¢nico para usu√°rio {user_id}: {e}")
        update.message.reply_text("‚ùå Erro ao salvar alerta. Tente novamente.")

def resumo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    enviar_resumo(user_id, update)

# --- L√≥gicas de envio ---

def enviar_resumo(user_id, update=None):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT ticker FROM acoes_monitoradas WHERE user_id=?", (user_id,))
            acoes = c.fetchall()

        if not acoes:
            message = "üìä Nenhuma a√ß√£o monitorada.\n\nUse `/add TICKER` para adicionar a√ß√µes."
            if update:
                update.message.reply_text(message, parse_mode='Markdown')
            else:
                telegram_bot_instance.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
            return

        mensagem = "üìä *RESUMO DAS A√á√ïES*\n\n"
        for (ticker,) in acoes:
            try:
                acao = yf.Ticker(ticker)
                hist = acao.history(period="7d")
                if hist.empty:
                    mensagem += f"*{ticker}*: ‚ùå Sem dados\n\n"
                    continue

                preco_atual = float(hist["Close"].iloc[-1])
                preco_ontem = float(hist["Close"].iloc[-2]) if len(hist) >= 2 else preco_atual
                preco_semana = float(hist["Close"].iloc[0]) if len(hist) >= 5 else preco_ontem

                var_dia = ((preco_atual - preco_ontem) / preco_ontem) * 100
                var_semana = ((preco_atual - preco_semana) / preco_semana) * 100

                # Emojis para varia√ß√£o
                emoji_dia = "üü¢" if var_dia >= 0 else "üî¥"
                emoji_semana = "üü¢" if var_semana >= 0 else "üî¥"

                mensagem += (
                    f"*{ticker}*\n"
                    f"üíµ R$ {preco_atual:.2f}\n"
                    f"{emoji_dia} Hoje: {'+' if var_dia >= 0 else ''}{var_dia:.2f}%\n"
                    f"{emoji_semana} Semana: {'+' if var_semana >= 0 else ''}{var_semana:.2f}%\n\n"
                )
            except Exception as e:
                logger.warning(f"Erro ao buscar dados para {ticker}: {e}")
                mensagem += f"*{ticker}*: ‚ùå Erro ao buscar dados\n\n"

        mensagem += "üí° Use `/dashboard` para visualiza√ß√µes detalhadas!"

        if update:
            update.message.reply_text(mensagem, parse_mode='Markdown')
        else:
            telegram_bot_instance.send_message(chat_id=user_id, text=mensagem, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Erro ao enviar resumo para usu√°rio {user_id}: {e}")

def verificar_alertas_precos():
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                SELECT user_id, ticker, preco_alvo, sentido FROM alertas_precos
                WHERE notificado = 0
            """)
            alertas = c.fetchall()

            for user_id, ticker, preco_alvo, sentido in alertas:
                try:
                    acao = yf.Ticker(ticker)
                    hist = acao.history(period="1d")
                    if hist.empty:
                        continue
                    preco_atual = float(hist["Close"].iloc[-1])
                except Exception as e:
                    logger.warning(f"Erro ao verificar alerta para {ticker}: {e}")
                    continue

                if (sentido == "UP" and preco_atual >= preco_alvo) or (sentido == "DOWN" and preco_atual <= preco_alvo):
                    emoji = "üöÄ" if sentido == "UP" else "üìâ"
                    telegram_bot_instance.send_message(
                        chat_id=user_id,
                        text=f"{emoji} *Alerta de pre√ßo:* {ticker} atingiu R$ {preco_atual:.2f} (alvo: R$ {preco_alvo:.2f})",
                        parse_mode='Markdown'
                    )

                    # Marca como notificado
                    c.execute("""
                        UPDATE alertas_precos SET notificado = 1 WHERE user_id = ? AND ticker = ?
                    """, (user_id, ticker))
                    conn.commit()
                    logger.info(f"Alerta de pre√ßo disparado para usu√°rio {user_id}, ticker {ticker}")

    except Exception as e:
        logger.error(f"Erro ao verificar alertas de pre√ßo: {e}")

def verificar_alertas_panico():
    agora = datetime.now(TZ).strftime("%H:%M")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                SELECT u.user_id, ap.ticker, ap.percentual_queda
                FROM alertas_panico ap
                JOIN usuarios u ON u.user_id = ap.user_id
                WHERE ap.ativo=1 AND u.horario_panico=?
            """, (agora,))
            rows = c.fetchall()

        for user_id, ticker, percentual in rows:
            try:
                acao = yf.Ticker(ticker)
                hist = acao.history(period="2d")
                if len(hist) < 2:
                    continue

                preco_hoje = float(hist["Close"].iloc[-1])
                preco_ontem = float(hist["Close"].iloc[-2])
                queda = ((preco_ontem - preco_hoje) / preco_ontem) * 100

                if queda >= percentual:
                    telegram_bot_instance.send_message(
                        chat_id=user_id,
                        text=(f"‚ö†Ô∏è *ALERTA DE P√ÇNICO:* {ticker} caiu {queda:.2f}% hoje, "
                              f"excedendo o limite de {percentual}% definido por voc√™.\n\n"
                              f"üí° Acesse o `/dashboard` para an√°lise detalhada."),
                        parse_mode='Markdown'
                    )
                    logger.info(f"Alerta de p√¢nico disparado para usu√°rio {user_id}, ticker {ticker}")

            except Exception as e:
                logger.warning(f"Erro ao verificar alerta p√¢nico para {ticker}: {e}")

    except Exception as e:
        logger.error(f"Erro ao verificar alertas de p√¢nico: {e}")

def verificar_agendamentos():
    agora = datetime.now(TZ).strftime("%H:%M")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id FROM usuarios WHERE resumo_automatico=1 AND horario_resumo=?", (agora,))
            usuarios = c.fetchall()

        for (user_id,) in usuarios:
            enviar_resumo(user_id)
            logger.info(f"Resumo autom√°tico enviado para usu√°rio {user_id}")

    except Exception as e:
        logger.error(f"Erro ao verificar agendamentos: {e}")

def main():
    global telegram_bot_instance

    setup_database()

    # Obter token do ambiente ou usar o hardcoded para desenvolvimento
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "7591057488:AAGOikjaLQWFPsZpkGsqIUnZEzEDsiR3vZU")

    if not TOKEN or TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("Token do Telegram n√£o configurado!")
        print("Erro: Configure a vari√°vel de ambiente TELEGRAM_BOT_TOKEN")
        return

    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    telegram_bot_instance = updater.bot

    # Registrar comandos
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("dashboard", dashboard_command))
    dispatcher.add_handler(CommandHandler("reset_dashboard", reset_dashboard))
    dispatcher.add_handler(CommandHandler("add", add_acao))
    dispatcher.add_handler(CommandHandler("remove", remove_acao))
    dispatcher.add_handler(CommandHandler("lista", listar_acoes))
    dispatcher.add_handler(CommandHandler("resumo", resumo))
    dispatcher.add_handler(CommandHandler("auto", configurar_auto))
    dispatcher.add_handler(CommandHandler("horario", configurar_horario))
    dispatcher.add_handler(CommandHandler("horario_panico", configurar_horario_panico))
    dispatcher.add_handler(CommandHandler("alerta", configurar_alerta))
    dispatcher.add_handler(CommandHandler("remover_alerta", remover_alerta))
    dispatcher.add_handler(CommandHandler("panico", configurar_panico))

    # Configurar agendador
    scheduler = BackgroundScheduler(timezone=TZ)
    scheduler.add_job(verificar_agendamentos, "interval", minutes=10)  # Reduzido para 10 minutos
    scheduler.add_job(verificar_alertas_precos, "interval", minutes=5)  # Reduzido para 5 minutos
    scheduler.add_job(verificar_alertas_panico, "interval", minutes=5)  # Reduzido para 5 minutos
    scheduler.start()

    logger.info("Bot iniciado com sucesso!")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()


# Fun√ß√£o para salvar alerta no hist√≥rico
def salvar_alerta_historico(user_id, ticker, alert_type, trigger_value, message):
    """Salvar alerta no hist√≥rico"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                INSERT INTO alert_history (user_id, ticker, alert_type, trigger_value, triggered_at, message)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, ticker, alert_type, trigger_value, datetime.now().isoformat(), message))
            conn.commit()
    except Exception as e:
        logger.error(f"Erro ao salvar alerta no hist√≥rico: {e}")

# Atualizar fun√ß√£o de verifica√ß√£o de alertas de pre√ßo
def verificar_alertas_precos():
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                SELECT user_id, ticker, preco_alvo, sentido FROM alertas_precos
                WHERE notificado = 0
            """)
            alertas = c.fetchall()

            for user_id, ticker, preco_alvo, sentido in alertas:
                try:
                    acao = yf.Ticker(ticker)
                    hist = acao.history(period="1d")
                    if hist.empty:
                        continue
                    preco_atual = float(hist["Close"].iloc[-1])
                except Exception as e:
                    logger.warning(f"Erro ao verificar alerta para {ticker}: {e}")
                    continue

                if (sentido == "UP" and preco_atual >= preco_alvo) or (sentido == "DOWN" and preco_atual <= preco_alvo):
                    emoji = "üöÄ" if sentido == "UP" else "üìâ"
                    message = f"{emoji} *Alerta de pre√ßo:* {ticker} atingiu R$ {preco_atual:.2f} (alvo: R$ {preco_alvo:.2f})"

                    telegram_bot_instance.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='Markdown'
                    )

                    # Salvar no hist√≥rico
                    salvar_alerta_historico(user_id, ticker, "price", preco_atual, message)

                    # Marca como notificado
                    c.execute("""
                        UPDATE alertas_precos SET notificado = 1 WHERE user_id = ? AND ticker = ?
                    """, (user_id, ticker))
                    conn.commit()
                    logger.info(f"Alerta de pre√ßo disparado para usu√°rio {user_id}, ticker {ticker}")

    except Exception as e:
        logger.error(f"Erro ao verificar alertas de pre√ßo: {e}")

# Atualizar fun√ß√£o de verifica√ß√£o de alertas de p√¢nico
def verificar_alertas_panico():
    agora = datetime.now(TZ).strftime("%H:%M")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                SELECT u.user_id, ap.ticker, ap.percentual_queda
                FROM alertas_panico ap
                JOIN usuarios u ON u.user_id = ap.user_id
                WHERE ap.ativo=1 AND u.horario_panico=?
            """, (agora,))
            alertas = c.fetchall()

            for user_id, ticker, percentual_queda in alertas:
                try:
                    acao = yf.Ticker(ticker)
                    hist = acao.history(period="7d")
                    if len(hist) < 2:
                        continue

                    preco_atual = float(hist["Close"].iloc[-1])
                    preco_anterior = float(hist["Close"].iloc[-2])
                    queda_real = ((preco_anterior - preco_atual) / preco_anterior) * 100

                    if queda_real >= percentual_queda:
                        message = f"üö® *ALERTA DE P√ÇNICO:* {ticker} caiu {queda_real:.2f}% (R$ {preco_atual:.2f})"

                        telegram_bot_instance.send_message(
                            chat_id=user_id,
                            text=message,
                            parse_mode='Markdown'
                        )

                        # Salvar no hist√≥rico
                        salvar_alerta_historico(user_id, ticker, "panic", queda_real, message)

                        logger.info(f"Alerta de p√¢nico disparado para usu√°rio {user_id}, ticker {ticker}, queda {queda_real:.2f}%")

                except Exception as e:
                    logger.warning(f"Erro ao verificar alerta de p√¢nico para {ticker}: {e}")

    except Exception as e:
        logger.error(f"Erro ao verificar alertas de p√¢nico: {e}")

